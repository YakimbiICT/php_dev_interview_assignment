package tj.zar.projects.imagehostingservice.api.service;

import org.json.JSONException;
import org.json.JSONObject;

import tj.zar.java.patterns.common.Jsonable;

/**
 * Image holds image data generated by {@link ImageHostingServiceImpl}.
 * 
 * @author Umed Khudoiberdiev <info@zar.tj>
 */
public class Image implements Jsonable {

	// -----------------------------------------------
	// Private fields
	// -----------------------------------------------

	/**
	 * Image's id.
	 */
	private String id;
	
	/**
	 * Image's url.
	 */
	private String url;
	
	/**
	 * Image's name.
	 */
	private String name;
	
	/**
	 * Image's description.
	 */
	private String description;

	// -----------------------------------------------
	// Constructor
	// -----------------------------------------------
	
	/**
	 * Empty constructor.
	 */
	public Image() {
	}

	/**
	 * Constructs Image from the raw data.
	 * 
	 * @param id
	 *            - id of the image
	 * @param url
	 *            - image's url
	 * @param name
	 *            - image's name or title
	 * @param description
	 *            - image's description
	 */
	public Image(String id, String url, String name, String description) {
		this.id				= id;
		this.url			= url;
		this.name			= name;
		this.description	= description;
	}

	// -----------------------------------------------
	// Getter methods
	// -----------------------------------------------
	
	/**
	 * Gets image's id.
	 * 
	 * @return image's id
	 */
	public String getId() {
		return id;
	}

	/**
	 * Gets image's url.
	 * 
	 * @return image's url
	 */
	public String getUrl() {
		return url;
	}

	/**
	 * Gets image's name.
	 * 
	 * @return image's name
	 */
	public String getName() {
		return name;
	}

	/**
	 * Gets image's description.
	 * 
	 * @return image's description
	 */
	public String getDescription() {
		return description;
	}

	// -----------------------------------------------
	// Overridden methods (from Jsonable)
	// -----------------------------------------------
	
	/**
	 * Encodes all Image's data to json object.
	 */
	@Override
	public JSONObject encodeJSON() throws JSONException {
		JSONObject json = new JSONObject();
		json.put("id", 			id);
		json.put("url", 		url);
		json.put("name", 		name);
		json.put("description", description);
		return json;
	}

	/**
	 * Decodes given json object and uses its values as Image data.
	 */
	@Override
	public void decodeJSON(JSONObject json) throws JSONException {
		id			= json.getString("id");
		url			= json.getString("url");
		name		= json.getString("name");
		description	= json.getString("description");
	}
	
}